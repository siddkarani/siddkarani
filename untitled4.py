# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QTa1CrSODr-CABRUT_g1hLypwozgl-SW
"""



import cv2
import numpy as np

def canny(img):
    if img is None:
        cap.release()
        cv2.destroyAllWindows()
        exit()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    kernel = 5
    blur = cv2.GaussianBlur(gray,(kernel, kernel),0)
    canny = cv2.Canny(gray, 50, 150)
    return canny

def region_of_interest(canny):
    height = canny.shape[0]
    width = canny.shape[1]
    mask = np.zeros_like(canny)
    triangle = np.array([[
    (200, height),
    (800, 350),
    (1200, height),]], np.int32)
    cv2.fillPoly(mask, triangle, 255)
    masked_image = cv2.bitwise_and(canny, mask)
    return masked_image

def houghLines(cropped_canny):
    return cv2.HoughLinesP(cropped_canny, 2, np.pi/180, 100,
        np.array([]), minLineLength=40, maxLineGap=5)

def addWeighted(frame, line_image):
    return cv2.addWeighted(frame, 0.8, line_image, 1, 1)

def display_lines(img, lines, warning=False):
    line_image = np.zeros_like(img)
    if lines is not None:
        for line in lines:
            for x1, y1, x2, y2 in line:
                color = (0, 0, 255) if not warning else (0, 0, 255)  # Red for normal, Blue for warning
                cv2.line(line_image,(x1,y1),(x2,y2), color, 10)
    return line_image

def make_points(image, line):
    slope, intercept = line
    y1 = int(image.shape[0])
    y2 = int(y1*3.0/5)
    x1 = int((y1 - intercept)/slope)
    x2 = int((y2 - intercept)/slope)
    return [[x1, y1, x2, y2]]

def calculate_curvature(lines):
    if lines is None or len(lines) != 2:
        return 0

    left_line = lines[0][0]
    right_line = lines[1][0]

    # Calculate slopes
    left_slope = (left_line[3] - left_line[1]) / (left_line[2] - left_line[0])
    right_slope = (right_line[3] - right_line[1]) / (right_line[2] - right_line[0])

    # Average curvature based on slope difference
    curvature = abs(left_slope - right_slope)
    return curvature

def check_lane_departure(frame, lines):
    if lines is None or len(lines) != 2:
        return False, "No lanes detected"

    frame_center = frame.shape[1] // 2
    left_line = lines[0][0]
    right_line = lines[1][0]

    # Calculate vehicle position relative to lane center
    lane_center = (left_line[0] + right_line[0]) // 2
    offset = abs(frame_center - lane_center)

    # Threshold for departure warning (pixels)
    threshold = 100

    if offset > threshold:
        return True, f"Lane Departure! Offset: {offset}px"
    return False, "Within lanes"

def average_slope_intercept(image, lines):
    left_fit    = []
    right_fit   = []
    if lines is None:
        return None
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1,x2), (y1,y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < 0:
                left_fit.append((slope, intercept))
            else:
                right_fit.append((slope, intercept))

    if len(left_fit) == 0 or len(right_fit) == 0:
        return None

    left_fit_average  = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    left_line  = make_points(image, left_fit_average)
    right_line = make_points(image, right_fit_average)
    averaged_lines = [left_line, right_line]
    return averaged_lines

cap = cv2.VideoCapture("test1.mp4")
while(cap.isOpened()):
    _, frame = cap.read()
    canny_image = canny(frame)
    cropped_canny = region_of_interest(canny_image)
    lines = houghLines(cropped_canny)
    averaged_lines = average_slope_intercept(frame, lines)

    # Calculate curvature and check for lane departure
    if averaged_lines is not None:
        curvature = calculate_curvature(averaged_lines)
        is_departing, departure_msg = check_lane_departure(frame, averaged_lines)

        # Display warnings and info
        if is_departing:
            cv2.putText(frame, departure_msg, (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        cv2.putText(frame, f"Curvature: {curvature:.2f}", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

        line_image = display_lines(frame, averaged_lines, warning=is_departing)
        combo_image = addWeighted(frame, line_image)
        cv2.imshow("result", combo_image)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()